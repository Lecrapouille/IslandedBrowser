/* *****************************************************************************
** MIT License
**
** Copyright (c) 2022 Quentin Quadrat
**
** Permission is hereby granted, free of charge, to any person obtaining a copy
** of this software and associated documentation files (the "Software"), to deal
** in the Software without restriction, including without limitation the rights
** to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
** copies of the Software, and to permit persons to whom the Software is
** furnished to do so, subject to the following conditions:
**
** The above copyright notice and this permission notice shall be included in all
** copies or substantial portions of the Software.
**
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
** AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
** LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
** OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
** SOFTWARE.
********************************************************************************
*/

#ifndef ISLANDEDBROWSER_HPP
#  define ISLANDEDBROWSER_HPP

#  include "Bookmarks.hpp"
#  include "ForceDirectedGraph.hpp"
#  include <string>

// *****************************************************************************
//! \brief Class owning the context of the application.
// *****************************************************************************
class IslandedBrowser
{
public:

    //! \brief Collection of bookmarks
    using Bookmarks = std::map<int, Bookmark>;
    //! \brief Collection of bookmark folders
    using Folders = std::map<int, Folder>;

    //----------------------------------------------------------------------
    //! \brief Default constructor. Set the dimension of the layout.
    //! \param[in] dimension dimension of the layout along X and Y axes.
    //----------------------------------------------------------------------
    IslandedBrowser(sf::Vector2f const dimension);

    //----------------------------------------------------------------------
    //! \brief Print on the console the graph structure.
    //----------------------------------------------------------------------
    friend std::ostream& operator<<(std::ostream& os, IslandedBrowser const& island)
    {
        os << island.m_graph;
        return os;
    }

    //----------------------------------------------------------------------
    //! \brief Const getter of the graph
    //----------------------------------------------------------------------
    inline DiGraph const& graph() const
    {
        return m_digraph;
    }

    //----------------------------------------------------------------------
    //! \brief Const getter of the graph nodes to display.
    //----------------------------------------------------------------------
    inline ForceDirectedGraph::Vertices const& vertices() const
    {
        return m_force_directed.vertices();
    }

    //----------------------------------------------------------------------
    //! \brief Do a single step on the expension of the graph.
    //----------------------------------------------------------------------
    void forceDirectedGraph();

    //----------------------------------------------------------------------
    //! \brief Get the URL of the node under the mouse position.
    //! \param[in] mouse mouse position along the layout dimension.
    //! \return A dummy string if there is no node under the mouse cursor.
    //! \return The URL if the selected node is a bookmark.
    //! \return A string of all URLs separated by a space if the selected node
    //! is a folder.
    //----------------------------------------------------------------------
    std::string const& getURL(sf::Vector2i mouse);

    //----------------------------------------------------------------------
    //! \brief Get the title of the node (bookmark or folder) under the mouse
    //! position.
    //! \return The title of the node.
    //----------------------------------------------------------------------
    std::string const& getTitle(sf::Vector2i mouse);

private:

    void getURL_chapo(DiGraph::Node const& node);
    void getTitle_chapo(DiGraph::Node const& node);

    //----------------------------------------------------------------------
    //! \brief C++ code generated by the script ../tool/bookmark.py from
    //! the Firefox bookmarks exported as JSON file.
    //----------------------------------------------------------------------
    void init(Bookmarks& bookmarks, Folders& folders);

    //----------------------------------------------------------------------
    //! \brief Create a directed graph from the Firefox bookmarks exported
    //! as JSON file.
    //----------------------------------------------------------------------
    void createGraph();

private:

    //! \brief Directed graph of bookmarks.
    DiGraph m_digraph;
    // TODO to be removed! The ForceDirectedGraph needs an undirected graph.
    DiGraph m_graph;
    //! \brief Forces to deploy the graph edges for a nice display.
    ForceDirectedGraph m_force_directed;
    //! \brief Database for the graph (bookmarks).
    Bookmarks m_bookmarks;
    //! \brief Database for the graph (bookmark folders).
    Folders m_folders;
    //! \brief Reserve memory for returning URL
    std::string m_cache_urls;
};

#endif
